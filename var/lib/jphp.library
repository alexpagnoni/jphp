<?php
if ( !defined( 'JPHP_LIBRARY' ) )
{
define( 'JPHP_LIBRARY', true );

/**
 * JPHPClass class file
 *
 * @version 2.0
 * @author Nicolas BUI <nbui@wanadoo.fr>
 *
 * This source file is part of JPHP Library Project.
 * Copyright: 2002 Vitry sur Seine/FRANCE
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, US
 *
 * The latest version of Vector can be obtained from:
 * http://www.jphplib.org
 */

/*----------------------------------------------------------------------------*\
 *								JPHP Constant definition										*
\*----------------------------------------------------------------------------*/
define("JPHP_CORE_DIR", 				PRIVATE_TREE.'var/lib');
define("JPHP_CACHE_DIR", 				TMP_PATH.'jphp');

define("JPHP_LIBRARY_PATH", 	        PRIVATE_TREE.'var/jphp/');
define("JPHP_LOG_FILE",				    LOG_PATH.'jphp.log');
define("JPHP_VERBOSE_MODE", 			FALSE);
define("JPHP_ZEND_ENCODER_MODE", 		FALSE);
define( 'JPHP_STANDARD_MODE', false );

/*----------------------------------------------------------------------------*\
 *		 								load the core class 										*
\*----------------------------------------------------------------------------*/
//require JPHP_CORE_DIR . DIRECTORY_SEPARATOR . 'Object.php';
//require JPHP_CORE_DIR . DIRECTORY_SEPARATOR . 'JPHPClassRegistry.php';
//require JPHP_CORE_DIR . DIRECTORY_SEPARATOR . 'JPHP.php';

/**
 * @version 2.0
 * @author Nicolas BUI <nbui@wanadoo.fr>
 *
 * This source file is part of JPHP Library Project.
 * Copyright: 2002 Vitry sur Seine/FRANCE
 *
 * The latest version can be obtained from:
 * http://www.jphplib.org
 */



class Object
{
   function Object()
	{
		
	}

	function className()
	{
		return get_class($this);
	}

	function getParentClass($object)
	{
	   return get_parent_class($object);
	}
	
   function equals(&$object)
   {
      if (Object::validClass($object))
      {
         return TRUE;
      }
      return FALSE;
   }
   
	function toString()
	{
		return 'Object';
	}
   
   function serialize()
   {
      return serialize($this);
   }
   
   function hashValue()
   {
      return md5(serialize($this));
   }
   
   function validClass($object, $classname = 'object')
   {
      return (is_object($object) && ($object->className()==$classname || is_subclass_of($object, $classname)));
   }
}


/**
 * JPHPClassRegistry class file
 *
 * @version 2.0
 * @author Nicolas BUI <nbui@wanadoo.fr>
 *
 * This source file is part of JPHP Library Project.
 * Copyright: 2002 Vitry sur Seine/FRANCE
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, US
 *
 * The latest version of Vector can be obtained from:
 * http://www.jphplib.org
 */

class JPHPClassRegistry
{
	var $packages = NULL;
	var $classes = NULL;

	/**
	 * Class registry constructor
	 * @access private
	 */
	function JPHPClassRegistry()
	{
		$this->packages = array();
		$this->classes = array();
	}
	
	
	/**
	 * create a singleton instance of JPHPClassRegistry
	 * @return	JPHPClassRegistry	a unique instance of a JPHPClassRegistry
	 * @access	private static
	 */
	function & getInstance()
	{
		static $instance;
		if (!isset($instance))
		{
			$instance = new JPHPClassRegistry();
		}
		return $instance;
	}

	/**
	 * Try to register the class/package 
	 * @param	string	a class name or a package name
	 * @return boolean TRUE if the class has been registered
	 * @access public static
	 */
	 function register($class_package, $class_class=NULL)
	 {
	 	static $registry;
		if (!isset($registry)) 
      {
         $registry =& JPHPClassRegistry::getInstance();
      }
		if (isset($class_class))
		{
			$class_package.= '.'.$class_class;
		}
      $class_package = preg_replace('/([À-Ý]|[A-Z])/e','chr(ord(\'\\1\')+32)', $class_package);
		// determine is a class or is a package
		if (JPHPClassRegistry::isClass($class_package))
		{
			$extractedClassName = JPHPClassRegistry::extractClassName($class_package);
			$extractedPackageName = JPHPClassRegistry::extractPackageName($class_package);
         $registry->classes[$extractedClassName] = $extractedPackageName;
		}
		else if (JPHPClassRegistry::isPackage($class_package))
		{
			$registry->packages[$class_package] = $class_package;
		}
		return FALSE;
	 }
	 
	 
	 /**
	 *	check if the parameter string is a package definition
	 *	@param	string|core.StringBuffer	a class name or a package name
	 *	@return boolean		TRUE if it's a package definition
	 *	@access public static
	 */
	function isPackage($package)
	{
      return $package[strlen($package)-1]==='*' && $package[strlen($package)-2]==='.';
	}
	
	/**
	 *	check if the parameter string is a class definition
	 *	@param	string|core.StringBuffer	a class name or a package name
	 *	@return boolean		TRUE if it's a package definition
	 *	@access public static
	 */
	function isClass($package)
	{
      return isset($package) ? $package[strlen($package)-1]!=='*' : FALSE;
	}
	
	/**
	 * try to extract a class name from a package call
	 * @param string|core.StringBuffer	a class name or a package name
	 * @return core.StringBuffer	the extracted class name if extraction is a success or NULL if fail to extract
	 * @access public static
	 */
	 function extractClassName($package)
	 {
	 	$array = explode('.', $package);
      return $array[count($array)-1];
	 }
	 
	/**
	 * try to extract a package name from a package call
	 * @param string|core.StringBuffer	a class name or a package name
	 * @return core.StringBuffer	the extracted package name if extraction is a success or NULL if fail to extract
	 * @access public static
	 */
	 function extractPackageName($package)
	 {
      if (JPHPClassRegistry::isPackage($package))
		{
         return substr($package, 0, strlen($package)-2);
		}
		else
		{
         $pos = strrpos($package, '.');
         if ($pos>0)
         {
            return substr($package, 0, $pos);
         }
         else
         {
            return $package;
         }
		}
		return NULL;
	 }
	 
	/**
	 * check if the class/package is already registered
	 * @param string|core.StringBuffer	a class name or a package name
	 * @return boolean	TRUE if the class/package is already registered
	 * @access public
	 */
	 function isRegistered($class_package, $class_class=NULL)
	 {
	 	static $registry;
		// get unique instance
		if (!isset($registry)) 
      {
         $registry =& JPHPClassRegistry::getInstance();
      }
		if (isset($class_class) || JPHPClassRegistry::isClass($class_package))
		{
         if (!isset($class_class))
         {
            $class_class = JPHPClassRegistry::extractClassName($class_package);
         }
         $class_class = preg_replace('/([À-Ý]|[A-Z])/e','chr(ord(\'\\1\')+32)', $class_class);
			return isset($registry->classes[$class_class]);
		}
      else
      {
         $class_package = preg_replace('/([À-Ý]|[A-Z])/e','chr(ord(\'\\1\')+32)', $class_package);
         return isset($registry->packages[$class_package]);
      }
	 }
	
   /**
    * Convert to real path
    */ 
   function convertToPath($package_name, $class_name=NULL)
	{
      $package_name = preg_replace('/(\*?)$/', '', $package_name);
      $package_name = strtr($package_name, '*.',' /');
      $package_name = str_replace(str_repeat(DIRECTORY_SEPARATOR,2), '.'.DIRECTORY_SEPARATOR, $package_name);
      $package_name = JPHP_LIBRARY_PATH . $package_name;
      if (isset($class_name))
		{
      	$package_name .= '/'.$class_name.'.php';
		}
      return $package_name;
	}
   /**
	 *	display all class and import that have been register
	 * @return void
	 * @access public static
	 */
	function _debug()
	{
	 	static $registry;
		// get unique instance
		if (!isset($registry)) 
      {
         $registry =& JPHPClassRegistry::getInstance();
      }
		print("<font style='font-family: Courier New; font-size: 9pt; color:#0000ff'><strong>Packages importation :</strong><ol>");
		$keys = array_keys($registry->packages);
      $len = count($keys);
		if ($len>0)
		{
			for ($i=0; $i<$len; $i++)
			{
            $pos = strpos($keys[$i], 'core.');
            if ($pos!==FALSE && $pos===0)
            {
   				print("<li><font color=#ff3300><strong>".$keys[$i]."</strong></font>");
            }
            else
            {
               print("<li>".$keys[$i]);
            }
			}
		}
		else
		{
			print("<li> no existance of package import");
		}
		print("</ol></font>");
		print("<font style='font-family: Courier New; font-size: 9pt; color:#0000ff'><strong>Classes importation :</strong><ol>");
		$keys = array_keys($registry->classes);
      $len = count($keys);
		if ($len>0)
		{
			for ($i=0; $i<$len; $i++)
			{
            $class = $registry->classes[$keys[$i]].".<b>".$keys[$i]."</b>";
            $pos = strpos($class, 'core.');
            if ($pos!==FALSE && $pos===0)
            {
               print("<li><font color=#ff3300>".$class."</font>");
            }
            else
            {
               print("<li>".$class);
            }
			}
		}
		
		else
		{
			print("<li> no existance of class import");
		}
		print("</ol></font>");
	}
   
   function validClass($object)
   {
      return Object::validClass($object, 'jphpclassregistry');
   }
}
/**
 * Provide short acess to class import
 *
 * JPHP class only provide static method for import and debug class and package
 *
 * @author Nicolas BUI
 * @since 19.09.2002
 * @copyright Nicolas BUI
 */

 class JPHP 
 {
 	function import($class)
	{
      $class = preg_split('/,/', preg_replace('/\s{1,}/', '', $class));
      $len = count($class);
      for ($i =0; $i<$len; $i++)
      {
         JPHPClass::import($class[$i]);
      }
	}

	function _debug()
	{
		JPHPClassRegistry::_debug();
	}
	
   function & loadClass($class, $parameters=NULL)
   {
      $classname = JPHPClassRegistry::extractClassName($class);
      if (!JPHPClassRegistry::isClass($class) || !JPHPClassRegistry::isRegistered($class))
      {
         // fixe : prior version use unimported File class.
         $path = JPHPClassRegistry::convertToPath($class).'.php';
         if (file_exists($path))
         {
            JPHP::import($class);
         }
         else
         {
            die('class cannot be found');
         }
      }
      $params = '';
      if ($parameters!==NULL && is_array($parameters))
      {
         $plen = count($parameters);
         if ($plen>0)
         {
            for ($i=0; $i<$plen; $i++)
            {
               $params .= '$parameters['.$i.']';
               if ($i<($plen-1))
               {
                  $params .= ', ';
               }
            }
         }
      }
      $obj = NULL;
      eval('$obj =& new '.$classname.'('.$params.');');
      return $obj;
   }

   function _display_core_package()
   {
      print("<font style='font-family: Courier New; font-size: 9pt; color:#ff3300'>");

      print("<ol><li><strong>core</strong>");
      print("<ol>");
      JPHP::listDir(JPHP_CORE_DIR);
      print("</ol>");
      print("</li></ol>");
		print("</font>");
   }

	function _display_packages()
   {
      print("<font style='font-family: Courier New; font-size: 9pt; color:#006600'>");
      JPHP::listDir(JPHP_LIBRARY_PATH);
		print("</font>");
   }
   
	function listDir($path)
	{
      if (file_exists($path) && is_dir($path))
		{
         print("<ol>");
         $handle=opendir($path);
			while ($file = readdir($handle))
			{
            if ($file!='.' && $file!='..')
            {
               $fullpath = $path . '/' . $file;
               if (is_dir($fullpath))
   				{
   					print("<li><strong>".$file."</strong>");
                  print("<ol>");
   					JPHP::listDir($fullpath);
   					print("</ol>");
   				}
   				else if (preg_match('/(\.php)$/i', $file)>0)
   				{
   					print("<li>".str_replace('.php','',$file)."</li>");
   				}
            }
			}
         print("</ol>");
		}
      else
      {
         print("<li>classes library directory cannot be found</li>");
      }
	}
   
   function validClass($object)
   {
      return Object::validClass($object, 'jphp');
   }
 }

/*----------------------------------------------------------------------------*\
 * 				adding core package into the registry									*
\*----------------------------------------------------------------------------*/
JPHPClassRegistry::register('core.*');
JPHPClassRegistry::register('core.Object');
JPHPClassRegistry::register('core.JPHPClassRegistry');
JPHPClassRegistry::register('core.JPHPClass');
JPHPClassRegistry::register('core.JPHP');


/*----------------------------------------------------------------------------*\
 * 						class implementation													*
\*----------------------------------------------------------------------------*/
class JPHPClass extends Object
{

   /**
	 *	importing a unique class or an entire package
	 *	@param	string|core.StringBuffer	a class name or a package name
	 *	@return void
	 *	@access public static
	 */
	function import($package)
	{
      // already registered ?
      if (JPHPClassRegistry::isRegistered($package))
      {
         return;
      }
      // extracting package name
		$packagename = JPHPClassRegistry::extractPackageName($package);
		
      $path = JPHPClassRegistry::convertToPath($package);
      if (JPHPClassRegistry::isPackage($package))
		{
         // filtering php class and running parser
         if (isset($path) && is_dir($path))
         {
            JPHPClassRegistry::register($package);
            $handle=opendir($path);
   			while ($file = readdir($handle)) 
   			{
               if ($file!=='.' && $file!=='..' && preg_match('/(\.php)$/i', $file)>0)
   				{
					   // the original code, including the patches 0.1 - 0.4 for this
					   // section, has been removed for readability's sake

                  $classname = substr($file, 0, strlen($file) - 4);
					   JPHPClass::import("$packagename.$classname");
   				}
   			}
   			closedir($handle);
         }
		}
		else if (JPHPClassRegistry::isClass($package))
		{
         // extracting class name
		   $classname = JPHPClassRegistry::extractClassName($package);
   		// loadclass
         $path .= '.php';
         if (isset($path) && is_file($path))
         {
            // patch 0.1
				require_once($path);
				// ~ patch 0.3
				if (JPHP_STANDARD_MODE && !(JPHPClass::package() === $packagename))
				{
				  die("missing or wrong package declaration in file $path");
				}
				// ~ end of patch 0.3
		      if (class_exists($classname))
            {
               JPHPClassRegistry::register($packagename, $classname);
            }
            else
            {
	            die("class [$classname] not found in file $path");
            }
				// end of patch 0.1
         }
		}
	}

	// patch 0.3

	/**
	 * keep track of imported packages
	 * @param  string $package being processed or empty string
	 * @return string package that has been declared or NULL
	 * @access public static
	 */
	function package($package = '')
	{
		static $announcedPackage = array();

		$currentPackage = NULL;
		if ('' != $package)
		{
			// informative package declaration
			array_push($announcedPackage, $package);
		}
		else
		{
			// get package declaration
			$currentPackage = array_pop($announcedPackage);
		}

		return $currentPackage;
	}
   
	// end of patch 0.3
	
   /**
	 *	check if class is valid and is a jphpclass object
	 *	@param	core.Object
	 *	@return	TRUE if it's a JPHP class
	 */
	function validClass($object)
   {
      return Object::validClass($object, 'jphpclass');
   }

}

}
?>
